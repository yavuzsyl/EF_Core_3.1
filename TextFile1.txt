#Azure Cosmos DB nosql documentation db from microsoft
https://code-maze.com/entity-framework-core-series/
CHAPTER:2---------------------------------

Nuget EfCore
L:adding efcore sqlserver package will be enough because it contains other packages in it
L:We have to add database provider to data project to enable efcore for dtabase we are using oracle,mssql,mysql,mongo etc.
L:in efcore we have tot explicitly tell to context which sqlprovider and connection string we are using

CHAPTER:3----------------------------------

MIGRATIONS

Nuget Packages;
	
L:Powershell:.tools
  dotnet cli :tools.dotnet
  migration api: .design(insalled as a dependency of tools)

C: get-help entityframework for useful commands
L: Migrations=> Snapshot.cs represents current state of model so when model has to change ef compares with this class and decides what needs to be change
C: script-migration generates sql script for migration

Recommendation of usage;
for development environment use update-database
for production environment use script-migration 

C:update-database -verbose with -verbose we can see details of process

Command for Db-First 
C:scaffold-dbcontext -provider Microsoft.EntityFrameworkCore.SqlServer -connection "Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=SamuraiAppData;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False"


CHAPTER:4------------------------------------------
L:Many to many , ef core doesnt generates join table automatically we have to add join table and in the OnModelCreating method of context class we have to specify composite key(foreign keys for main tables) with using FluentApi

L:One to One , one to one relation in ef core is always optional if we want to make it required we have to make it in our business logic

L: We can target multiple frameweroks with "targetFrameworks"   <TargetFrameworks>netcoreapp3.1;netstandard2.0</TargetFrameworks>

L: If we dont write dbset prop for a class in context, ef core doesnt generate table but if we write that class as a navigational property in any class written in as dbset in context class ef core generates table for that class , we can use this if we dont want to use Dbset for that class with this in Fluent api we can change default class name


CHAPTER:5---------------------------------------------

L:with adding new entity to dbset prop context will start to tracking or "change tracking" this entity.Context does this with the internal entityEntry object
EntityEntry object keep currentstate of object and other informations so context will know whats going on with entity.
  var samurai = new Samurai { Name = "Sampson" };
            context.Samurais.Add(samurai);
			context.SaveChanges();
L: with savechanges method ef core will map the new or edited objects to sql with using sql provider and receives the mapping result to SQL
L: savechanges works with transaction. when savechanegs calls more than 1 command to excute if one of them fails savechanges will roll back transactions so nothing will be changed 


D:6/14
L:EF core supports bulk operation addrange(list)  , addrange(obj1,obj2) | ef core hase threshold operations value to execute batch insert and it is 4 operation cuz less then 4 it is faster to insert as single 
L:@@ROWCOUNT returns the number of rows affected by the last statement | SCOPE_IDENTITY() returns the last identity value inserted into identity column in the same scope

L:ALSO we can use addrange to add different typed objects with context  context.addrange(type1obj,type2obj)
L:.UseSqlServer("Data Source =(localdb)\\MSSQLLocalDB; Initial Catalog = SamuraiAppData", options => options.MaxBatchSize(150)); WE CAN Configure max batch size

L:EF Query workflow ex;
context.samurais.ToList(); => with tolist ef core executes the query => ef reads model works with provider and sends sql query to database => receives result => materializes results as objects => adds tracking details to dbocntext object instance for each entity
L: there are to ways to express linq queries:
1.linq-methods context.samurais.ToList();
2.linq-query syntax (from s in samurais select s).ToList() 1 is much practical 

L: db connection remains open during enumaration so if there are lots of work for each result connection stays open until last result is fetched and thats not good it can block other users to reach data , best way is the get all data with tolist one time and then iterate  

L:s:object | =>:lambda operator | s.Name == "samspon":expression
L: if we send value as parameter to linq method ef core will parameterize it in sql
var samurai = context.Samurais.FirstOrDefault(s => s.Name == name);
but if we send directly the value it will hard coded in sql i think parameterizing is way better cuz ef core will cache the query
L:with .EnableSensitiveDataLogging(true) in dbcontext.onconfiguring() method we are saying that show sensitive data in logging like parameter values that sending to database 
L:  var filter = "J%";
var samurai2 = context.Samurais.Where(samurai=> EF.Functions.Like(samurai.Name,filter)).ToList();
new feature EF.Functions.Like(expression) we can use this instead of contains cuz in the end contains converted to this
L: Find(key) : if the entity with the given key tracking by context it returns the entity without going to database else it requests to database with the given primary keys and returns entity or null due to its existince and find method is not a linq method but a dbset method

Aggreagating in Queries
L:LINQ TO ENTITIES EXECUTION methods
ToList()
First()
FirstOrDefault()
Single()
SingleOrDefault()
Last()*
LastOrDefault()*
Count()
LongCount()
Min(), Max()
Average(), Sum()
ToListAsync()
FirstAsync()
FirstOrDefaultAsync()
SingleAsync()
SingleOrDefaultAsync()
LastAsync()*
LastOrDefaultAsync()*
CountAsync()
LongCountAsync()
MinAsync(), MaxAsync()
AverageAsync(), SumAsync()
AsAsyncEnumerable**
L:Find(primary key) it executes immidiately  looks for entity in context it it s tracked by context returns it else goes db 
so if we have primary key we should use find 
L:*Last methods require query to have an OrderBy() method otherwise will return full set then pick last in memory or throws exception so use it with orderby 
**New to EF Core 3 with C#8 support
L:First ,Single ... methods like these(has default version of itself) throws exception if expression doesnt match 
single entity returning methods selects top1

Updating Simple Objects 
L:Since db context tracks the entity-entities when retrieved from database entity.entry object knows the state of entity(updated or deleted) if we call savechanges method without using update method entity will be updated 
L:OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY-SQL | Skip(10).Take(10)-LINQ Methods
L: again the batch execution threshold is 4 operations 
L: Update - UpdateRange with+(context.UpdateRange)

Removing Simple Objects 
L:Remove - RemoveRange with+(context.RemoveRange)

Persisting Data in Disconnected Scenarios
L:w AsNoTracking context retrieves entity wout tracking it & with new context instance using update method will start tracking the given entity and thus that newcontext didnt retrieve that entity from database it doesnt know the history of it so wehen savechanegs called it will send all of entity properties to update 
L:if we go on one context it will send only the id and changed value to update  but in real world applications mostly it works with more then one context instance so it will be hard to tack entity all time so we can use Update method to track entity end savechange

Enhancing Performance in Disconnected Apps with No-Tracking settings
L:Query level no tracking .AsNoTracking() method we cant use Find method after AsNoTracking() method 
L:Context level we can specify instance level we will see later and constructor level ChangeTracker.QueryTrackingBehavior ...

CHAPTER 6

Inserting Related Data 
L:insert 
//InserNewSamuraiWithAQuote();
//InserNewSamuraiWithManyQuote();
//AddQuoteToExistingSamuraiWhileTracked();
//AddQuoteToExistingSamuraiWhileNotTracked(5);
//AddQuoteToExistingSamuraiWhileNotTrackedEasy(5);

Eager Loading Related Data
L:Include related objects in query
_context.Samurais
.Include(s => s.Quotes)
.ThenInclude(q=>q.Translations)
.FirstOrDefault();

t Get quotes for the samurai
t Then get the translations for those
quotes

_context.Samurais
.Include(s => s.Quotes)
.Include(s=>s.Clan)
.FirstOrDefault();

t Get quotes for samurais
t Also get the clan for samurais


Projecting Related Data in Queries
L:.Select(x=> new {x.Name , x.Quotes});
L: Project edilen alanlara göre ortaya çıkan yeni anonymous modelde propertiler arasında dbset entitie si varsa onlar track edilir diğerleri edilmez
context.ChangeTracker.Entries(), results with quick watch we can see which entities tracked
L: SQL SELECT Name,Id From users , Select(x=> new NameIdModel{Name=x.name, Id = x.Id  })

D:6/16 midnight 17

Loading Related Data in Queries

Explicit Loading (-Load()-): explicitly retrieve related data for objects already in memory
L:context.Entry(samurai).Collection(s=> s.Quotes).Load();
context.Entry(samurai).Reference(s=> s.Horse).Load();
L:We can only load from a single object  - we can use another linq query instead of iterating list of entities
(-Query()-)
L:Also we can filter loaded data using the QUERY method - which we cant do with eager Loading
context.Entry(samurai)
.Collection(s=> s.Quotes)
.Query
Where(q=> q.Quote.Contains("wECK".ToLower()))
.ToList();


Lazy Loading(implicitly loading) : another way to retrieve related data for objects already in memory
L:Lazy loading is off by default
L:just use  navigation object to retrieve data 
How to enable ? :
1.Every navigation property must be virtual
2.EntityFramework.Proxies package
3.ModelBuilder.UserLazyLoadingProxies()


Using Related Data To Filter Ojects 
.Where(s=> s.Quotes.Any(q => q.name.Contains("sam")))

Modifying Related Data
L:ModifyingRelatedDataWhenTracked is easy it just updates changed data 
L:ModifyingRelatedDataWhenNotTracked is complicated it updates all related data with parent object even they are not changed
to solve this ef core has context.Entry(quote).state = EntityState.Modified   method will just update given object

Entity Framework Core 2 : Mappings -Advanced  Courses

Creating and Changing Many to Many Relationships
L: adding new object to join table var sbjoin = new SamuraiBattle { SamuraiId = 1, BattleId = 1 };
context.SamuraiBattles.Add(sbjoin);//if we dont have db set of join table just use context.Add(sbjoin)
context.SaveChanges(); 
L: adding var battle = context.Battles.FirstOrDefault();
battle.SamuraisInBattles
    .Add(new SamuraiBattle { SamuraiId = 2 });//do not need to specify battle id because of context tracks battle
context.SaveChanges();

Querying Across many to many 
L:GetSamuraiWithBattles


D:6/17 midnight 18

Persisting Data in One-to-One Relationships
L:   //AddNewSamuraiWithHorse(); new samurai with new horse add context
//AddNewHorseToSamuraiUsingSamuraiId(); new horse using samurai id & add horse to context
//AddNewHorseToSamuraiInMemory(); get samurai  samurai.horse = new Horse & context save changes
//AddNewHorseToDisconnectedSamuraiInMemory(); get samurai tracked samurai.horse = new horse , new context attach samurai to context instead of update because update will update not changed samurai but attach will flag samurai entity-state to unchanged will only insert horse 
//ReplaceAHorse();//get samurai  samurai.horse = new Horse & context save changes
Changing the Child Of an Existing Parent 
Is foreign key nullable
is the child object in memory if not will throw exception
are the objects being tracked

Querying One-to-One Relationships
L:if db set not exist use context.Set<Type>().ToList();

Working with a Relationship that has minimal properties
clan --->Samurais 
clan.cs doesnt have collection of samurais and samurai.cs doesnt have Clan foreign key only navigation prop of Clan
L: go on navigation property 


CHAPTER 7

Adding Views and Other Database Objects
Using Migrations
L:add migration and use up & down method migrationBuilder.SQL("CREATE FUNCTION X() RETURNS int as begin ...")

docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-3.0/breaking-changes#qt


Using Keyless Entities to Map to Views
L:these entities are readonly
+dbcontext
+fluent api onmodelcreating hasnokey - toview
L:ef core wont track those entities

Querying with Raw SQL
_context.Samurais.FromSQLRaw(“some sql string”).ToList();
_context.Samurais.FromSQLRawAsync(“some sql string”).ToList();
_context.Samurais.FromSQLInterpolated($“some sql string {var}”).ToList();
_context.Samurais.FromSQLInterpolatedAsyn($“some sql {var}”).ToList();

var samurais2 = context.Samurais.FromSqlRaw("SELECT *FROM Samurais").Include(s=> s.Quotes).ToList();
var samurais3 = context.Samurais.FromSqlRaw($"SELECT *FROM Samurais WHERE Name = '{"Sam"}'").ToList();//open to sql injection no parameterized
var samurais4 = context.Samurais.FromSqlInterpolated($"SELECT *FROM Samurais WHERE Name = {"Sam"}").ToList();


Running Stored Procedure Queries
with Raw SQL


Executing Non-Query Raw SQL Commands
_context.Database.ExecuteSQLRaw(“some SQL string”);
_context.Database.ExecuteSQLRawAsync(“some SQL string”);
_context.Database.ExecuteSQLInterpolated($“some SQL string {variable}”);
_context.Database.ExecuteSQLInterpolatedAsync($“some SQL string {var}”);

Only result is number of rows affected
On-the-fly SQL or Stored Procedures